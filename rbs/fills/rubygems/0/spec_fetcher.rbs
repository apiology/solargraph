# <!-- rdoc-file=lib/rubygems/spec_fetcher.rb -->
# SpecFetcher handles metadata updates from remote gem repositories.
#
class Gem::SpecFetcher
  self.@fetcher: untyped

  @sources: untyped

  @update_cache: untyped

  @specs: untyped

  @latest_specs: untyped

  @prerelease_specs: untyped

  @caches: untyped

  @fetcher: untyped

  include Gem::UserInteraction

  include Gem::Text

  attr_reader latest_specs: untyped

  attr_reader sources: untyped

  attr_reader specs: untyped

  attr_reader prerelease_specs: untyped

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - fetcher()
  # -->
  # Default fetcher instance.  Use this instead of ::new to reduce object
  # allocation.
  #
  def self.fetcher: () -> untyped

  def self.fetcher=: (untyped fetcher) -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - new(sources = nil)
  # -->
  # Creates a new SpecFetcher.  Ordinarily you want to use the default fetcher
  # from Gem::SpecFetcher::fetcher which uses the Gem.sources.
  #
  # If you need to retrieve specifications from a different `source`, you can send
  # it as an argument.
  #
  def initialize: (?untyped? sources) -> void

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - search_for_dependency(dependency, matching_platform=true)
  # -->
  # Find and fetch gem name tuples that match `dependency`.
  #
  # If `matching_platform` is false, gems for all platforms are returned.
  #
  def search_for_dependency: (untyped dependency, ?bool matching_platform) -> ::Array[untyped]

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - detect(type=:complete) { |tup| ... }
  # -->
  # Return all gem name tuples who's names match `obj`
  #
  def detect: (?::Symbol type) { (untyped) -> untyped } -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - spec_for_dependency(dependency, matching_platform=true)
  # -->
  # Find and fetch specs that match `dependency`.
  #
  # If `matching_platform` is false, gems for all platforms are returned.
  #
  def spec_for_dependency: (untyped dependency, ?bool matching_platform) -> ::Array[untyped]

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - suggest_gems_from_name(gem_name, type = :latest, num_results = 5)
  # -->
  # Suggests gems based on the supplied `gem_name`. Returns an array of
  # alternative gem names.
  #
  def suggest_gems_from_name: (untyped gem_name, ?::Symbol type, ?::Integer num_results) -> (::Array[untyped] | untyped)

  # <!--
  #   rdoc-file=lib/rubygems/spec_fetcher.rb
  #   - available_specs(type)
  # -->
  # Returns a list of gems available for each source in Gem::sources.
  #
  # `type` can be one of 3 values: :released   => Return the list of all released
  # specs :complete   => Return the list of all specs :latest     => Return the
  # list of only the highest version of each gem :prerelease => Return the list of
  # all prerelease only specs
  #
  def available_specs: (untyped type) -> ::Array[untyped]

  def tuples_for: (untyped source, untyped type, ?bool gracefully_ignore) -> untyped
end
