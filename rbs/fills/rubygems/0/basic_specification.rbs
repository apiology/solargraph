# <!-- rdoc-file=lib/rubygems/basic_specification.rb -->
# BasicSpecification is an abstract class which implements some common code used
# by both Specification and StubSpecification.
#
class Gem::BasicSpecification
  @ignored: untyped

  @extension_dir: untyped

  @full_gem_path: untyped

  @full_require_paths: untyped

  @paths_map: untyped

  @gem_dir: untyped

  attr_writer base_dir: untyped

  attr_writer extension_dir: untyped

  attr_writer ignored: untyped

  # <!-- rdoc-file=lib/rubygems/basic_specification.rb -->
  # The path this gemspec was loaded from.  This attribute is not persisted.
  #
  attr_accessor loaded_from: untyped

  attr_writer full_gem_path: untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - new()
  # -->
  #
  def initialize: () -> void

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - default_specifications_dir()
  # -->
  #
  def self.default_specifications_dir: () -> untyped

  extend Gem::Deprecate

  def gem_build_complete_path: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - activated?()
  # -->
  # True when the gem has been activated
  #
  def activated?: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - base_dir()
  # -->
  # Returns the full path to the base gem directory.
  #
  # eg: /usr/local/lib/ruby/gems/1.8
  #
  def base_dir: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - contains_requirable_file?(file)
  # -->
  # Return true if this spec can require `file`.
  #
  def contains_requirable_file?: (untyped file) -> (false | untyped)

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - ignored?()
  # -->
  # Return true if this spec should be ignored because it's missing extensions.
  #
  def ignored?: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - default_gem?()
  # -->
  #
  def default_gem?: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - default_gem_priority()
  # -->
  # Regular gems take precedence over default gems
  #
  def default_gem_priority: () -> (1 | -1)

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - base_dir_priority(gem_path)
  # -->
  # Gems higher up in `gem_path` take precedence
  #
  def base_dir_priority: (untyped gem_path) -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - extension_dir()
  # -->
  # Returns full path to the directory where gem's extensions are installed.
  #
  def extension_dir: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - extensions_dir()
  # -->
  # Returns path to the extensions directory.
  #
  def extensions_dir: () -> untyped

  private

  def find_full_gem_path: () -> untyped

  public

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - full_gem_path()
  # -->
  # The full path to the gem (install path + full name).
  #
  # TODO: This is duplicated with #gem_dir. Eventually either of them should be
  # deprecated.
  #
  def full_gem_path: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - full_name()
  # -->
  # Returns the full name (name-version) of this Gem.  Platform information is
  # included (name-version-platform) if it is specified and not the default Ruby
  # platform.
  #
  def full_name: () -> ::String

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - full_name_with_location()
  # -->
  # Returns the full name of this Gem (see `Gem::BasicSpecification#full_name`).
  # Information about where the gem is installed is also included if not installed
  # in the default GEM_HOME.
  #
  def full_name_with_location: () -> (::String | untyped)

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - full_require_paths()
  # -->
  # Full paths in the gem to add to `$LOAD_PATH` when this gem is activated.
  #
  def full_require_paths: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - datadir()
  # -->
  # The path to the data directory for this gem.
  #
  def datadir: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - to_fullpath(path)
  # -->
  # Full path of the target library file. If the file is not in this gem, return
  # nil.
  #
  def to_fullpath: (untyped path) -> (untyped | nil)

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - gem_dir()
  # -->
  # Returns the full path to this spec's gem directory. eg:
  # /usr/local/lib/ruby/1.8/gems/mygem-1.0
  #
  # TODO: This is duplicated with #full_gem_path. Eventually either of them should
  # be deprecated.
  #
  def gem_dir: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - gems_dir()
  # -->
  # Returns the full path to the gems directory containing this spec's gem
  # directory. eg: /usr/local/lib/ruby/1.8/gems
  #
  def gems_dir: () -> untyped

  def internal_init: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - name()
  # -->
  # Name of the gem
  #
  def name: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - platform()
  # -->
  # Platform of the gem
  #
  def platform: () -> untyped

  def raw_require_paths: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - require_paths()
  # -->
  # Paths in the gem to add to `$LOAD_PATH` when this gem is activated.
  #
  # See also #require_paths=
  #
  # If you have an extension you do not need to add `"ext"` to the require path,
  # the extension build process will copy the extension files into "lib" for you.
  #
  # The default value is `"lib"`
  #
  # Usage:
  #
  #     # If all library files are in the root directory...
  #     spec.require_path = '.'
  #
  def require_paths: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - source_paths()
  # -->
  # Returns the paths to the source files for use with analysis and documentation
  # tools.  These paths are relative to full_gem_path.
  #
  def source_paths: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - matches_for_glob(glob)
  # -->
  # Return all files in this gem that match for `glob`.
  #
  def matches_for_glob: (untyped glob) -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - plugins()
  # -->
  # Returns the list of plugins in this spec.
  #
  def plugins: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - lib_dirs_glob()
  # -->
  # Returns a string usable in Dir.glob to match all requirable paths for this
  # spec.
  #
  def lib_dirs_glob: () -> ::String

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - to_spec()
  # -->
  # Return a Gem::Specification from this gem
  #
  def to_spec: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - version()
  # -->
  # Version of the gem
  #
  def version: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - stubbed?()
  # -->
  # Whether this specification is stubbed - i.e. we have information about the gem
  # from a stub line, without having to evaluate the entire gemspec file.
  #
  def stubbed?: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - this()
  # -->
  #
  def this: () -> self

  private

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - have_extensions?()
  # -->
  #
  def have_extensions?: () -> untyped

  # <!--
  #   rdoc-file=lib/rubygems/basic_specification.rb
  #   - have_file?(file, suffixes)
  # -->
  #
  def have_file?: (untyped file, untyped suffixes) -> (true | untyped)
end
