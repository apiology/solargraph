module Open3
  def self.capture2: (?Hash[String, String] env, *String cmds) -> [String, Process::Status]

  def self.capture2e: (?Hash[String, String] env, *String cmds) -> [String, Process::Status]

  def self.capture3: (?Hash[String, String] env, *String cmds) -> [String, String, Process::Status]

  def self.pipeline: (?Hash[String, String] env, *String cmds) -> Array[Process::Status]

  def self.pipeline_r: (?Hash[String, String] env, *String cmds) -> [IO, Process::Waiter]

  def self.pipeline_rw: (?Hash[String, String] env, *String cmds) -> [IO, IO, Process::Waiter]

  def self.pipeline_start: (?Hash[String, String] env, *String cmds) -> Array[Process::Waiter]

  def self.pipeline_w: (?Hash[String, String] env, *String cmds) -> [IO, Process::Waiter]

  def self.popen2: (?Hash[String, String] env, *String exe_path_or_cmd_with_args) -> [IO, IO, Process::Waiter]
                 | [U] (?Hash[String, String] env, *String exe_path_or_cmd_with_args) { (IO stdin, IO stdout, Process::Waiter wait_thread) -> U } -> U

  def self.popen2e: (?Hash[String, String] env, *String exe_path_or_cmd_with_args) -> [IO, IO, Process::Waiter]
                  | [U] (?Hash[String, String] env, *String exe_path_or_cmd_with_args) { (IO stdin, IO stdout_and_stderr, Process::Waiter wait_thread) -> U } -> U

  def self.popen3: (?Hash[String, String] env, *String exe_path_or_cmd_with_args) -> [IO, IO, IO, Process::Waiter]
                 | [U] (?Hash[String, String] env, *String exe_path_or_cmd_with_args) { (IO stdin, IO stdout, IO stderr, Process::Waiter wait_thread) -> U } -> U

  VERSION: ::String
end
